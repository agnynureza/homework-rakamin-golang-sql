// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/movies.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/agnynureza/homework-rakamin-golang-sql/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMovieRepoInterface is a mock of MovieRepoInterface interface.
type MockMovieRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepoInterfaceMockRecorder
}

// MockMovieRepoInterfaceMockRecorder is the mock recorder for MockMovieRepoInterface.
type MockMovieRepoInterfaceMockRecorder struct {
	mock *MockMovieRepoInterface
}

// NewMockMovieRepoInterface creates a new mock instance.
func NewMockMovieRepoInterface(ctrl *gomock.Controller) *MockMovieRepoInterface {
	mock := &MockMovieRepoInterface{ctrl: ctrl}
	mock.recorder = &MockMovieRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieRepoInterface) EXPECT() *MockMovieRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockMovieRepoInterface) CreateMovie(movie *models.Movies) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", movie)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMovieRepoInterfaceMockRecorder) CreateMovie(movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieRepoInterface)(nil).CreateMovie), movie)
}

// DeleteMovie mocks base method.
func (m *MockMovieRepoInterface) DeleteMovie(slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMovieRepoInterfaceMockRecorder) DeleteMovie(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovieRepoInterface)(nil).DeleteMovie), slug)
}

// GetOneMovie mocks base method.
func (m *MockMovieRepoInterface) GetOneMovie(slug string) (models.Movies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneMovie", slug)
	ret0, _ := ret[0].(models.Movies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneMovie indicates an expected call of GetOneMovie.
func (mr *MockMovieRepoInterfaceMockRecorder) GetOneMovie(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneMovie", reflect.TypeOf((*MockMovieRepoInterface)(nil).GetOneMovie), slug)
}

// UpdateMovie mocks base method.
func (m *MockMovieRepoInterface) UpdateMovie(payload *models.Movies, slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", payload, slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockMovieRepoInterfaceMockRecorder) UpdateMovie(payload, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovieRepoInterface)(nil).UpdateMovie), payload, slug)
}
